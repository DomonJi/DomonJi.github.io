<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Rxjs 数据流实践]]></title>
      <url>%2Frxjs-dataflow-in-action%2F</url>
      <content type="text"><![CDATA[遇到的困难目前公司的核心项目DCE(DaoCloud Enterprise)是一个非常复杂的SPA，它的复杂性主要体现在数据和交互逻辑两方面上。在数据方面，DCE管理着相当多的数据。在交互逻辑方面，DCE中的每一个操作几乎都是牵一发而动全身。但是交互逻辑的复杂归根结底是表现为数据的复杂，因为每一次交互，本质上都是在处理数据。为了保证数据的正确性，原来使用angularjs写的DCE中有很多数据处理、检测数据变化的代码，结果导致应用非常的卡顿。 复杂数据SPA应用的难点数据来源多DCE的数据主要有以下几个来源： 后端和Docker的API API是数据的主要来源，应用、服务、容器、存储、租户等信息都是通过API获取的。 Docker API 所使用的 streamstream 也是一个通信协议。Docker使用这个协议来通知容器状态的变化。 后端的Socker后端通过socket来通知应用等数据的状态的变化。 localStorage保存用户信息，租户信息等。 数据来源多导致了两个问题： 复用处理数据的逻辑比较困难：比如容器列表这个数据。获取的时候我们需要一段代码来格式化容器列表。但是容器列表之后还会更新，由于更新的逻辑和获取的逻辑不一样，所以就很难再复用之前所使用的代码。 2.获取数据的接口形式不统一： 如今我们调用API时，都会返回一个Promise。但是不是所有的数据来源都能转换成Promise，比如Socket事件，结果就是在获取数据的时候，要先调用API，单后再监听socket事件。结果就是代码的冗余。 数据复杂DCE数据的复杂还体现在三个方面： 后端获取的数据不能直接展示，要经过一系列复杂逻辑的格式化 其中部分格式化逻辑还包括发送请求。 数据之间还存在着复杂的依赖关系。 数据更新困难缓存是个很好的想法，但是在一个对数据的实时性要求非常高的应用中，缓存很难做的足够好。DCE中几乎所有数据都是会被全局使用到的。比如郭应用列表的数据，不仅要在应用列表中显示，也可能在侧边栏统计应用数量的地方要用到。所以说如果一处数据更新了，另一处没有更新，那就很尴尬了。还有就是数据的依赖关系，如果被依赖的数据改变了，此时也要更新依赖的缓存数据。但是实际上很多时候数据的依赖树太深了，有些依赖关系还不是很明显，结果就会忘记更新缓存。 结论前端开发两大噩梦：状态管理和异步操作，同时以上三个难点也是传统的flux架构难以胜任的原因。Rxjs在这个时候就能很轻而易举的解决这两大困难。 DCE 的 Rxjs 架构图 alpha 为应用所需的顶层数据源，如版本信息，用户信息以及license等，需要这些数据才能进行下一步。socket 为应用与后端数据实时通信的接口，当后端数据有更新时，通过 socket 发送消息给 hub，通知应用更新。hub 为整个应用最主要的 observable ，是数据的分发中心，当收到socket的消息时，会及时的通知右侧底层数据源调用相应的接口获取最新的数据，而右侧规模较大的数据则由这些底层数据源 combinelatest 拼接而成，形成一颗单向流动的数据树。 Rxjs解决的困难 统一了异步和同步的逻辑。解决异步问题。 数据推送的机制把拉取的操作变成了推送的操作。解决更新问题。 BehaviorSubject 可以缓存数据。解决了状态管理的问题。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vuejs 踩坑及经验总结]]></title>
      <url>%2Fvue-issues-summarize%2F</url>
      <content type="text"><![CDATA[趟坑总结问题描述在使用 v-for repeat 组件时控制台会出现警告： 解决方法在组件标签上使用 v-for ： 加 :key 使用 template 标签包裹该组件，再在 template 标签 上使用 v-for。 趟坑总结问题描述在 Vue data 属性中定义的变量名如果以 “_” 开头，就不能正确的赋值和渲染 问题原因https://github.com/vuejs/vue/issues/2098 解决方法变量名不要以 “_” 开头趟坑总结问题描述在我们的前端组件库 dao-option 组件中 中使用 :key 时，如果 v-for 枚举的值是 Object，但是 :key 中的值是简单类型时，dao-options 选出来的值并不在 dao-select 原本储存的 options 中。 问题原因在组件中使用 :key 时，如果 v-for 枚举的值是 Object，但是 :key 中的值是简单类型时，当 Object 地址改变，:key 中解析值没变时，组件会被复用，并不会被销毁。例如： dao-style 的 dao-select 中 dao-option 因为上述的描述导致组件没被销毁，最终 dao-options 选出来的值不在 dao-select 原本储存的 options 中。 解决方法:key 绑定复杂类型趟坑总结问题描述在 Vue Router 中定义路由为 a/:id 形式时，从 a/1 跳转到 a/2 时，不会触发 component 的 created 等方法。 解决方法1.&lt;router-view :key=&quot;$route.path&quot;&gt;&lt;/router-view&gt; 在 component 中监听 $route.path 的变化，手动触发 created 内的方法。P.S. 可以参照 router-link 中的 响应路由参数的变化 趟坑总结问题描述不能直接 watch subscriptions 中的变量，回调不会执行。 解决方法要先在 data 中注册该变量]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017阿里前端暑假实习面试经历]]></title>
      <url>%2Fali-frontend-trainee-interview%2F</url>
      <content type="text"><![CDATA[3月6日上午 10:27 25分钟 一面 自我介绍 主要就讲了自己的学校，学过的课程，给学校做过的项目啊，自己做过的项目。 闭包 是指一个函数能记住并访问它所在的作用域（相关内容具体可以看《你不知道的JavaScript》），闭包产生的原因是函数作用域。 闭包有哪些优缺点 我一开口讲内存泄漏问题，面试官就打断并提问，如果同时有大量请求，每次请求都会调用一个settimeout，此时造成大量闭包内存如何解决，我当时没回答上来…… 解释一下尾递归 尾递归指的是函数的最后一次调用是完全调用自身的函数。V8引擎会对尾递归调用作相应的优化。 V8引擎对尾递归调用有什么样的优化 不需要保存调用栈信息，只需要保存调用记录。 遍历数组有哪些方法 forEach,map,reduce,filter 其实还有some,every,reduceRight我当时没想起来 有哪些 HTTP Methods GET,POST,PUT,DELETE,HEAD,PATCH,OPTION 面试官说还有TRACE，我开始慌了😂 CSS垂直居中的方法 这个问题可以看《CSS揭秘》 绝对定位方法、基于视口单位方法、flexbox方法。 浏览器事件循环 浏览器会把异步操作放入事件队列中，主线程调用栈全部弹空之后会去检查事件队列并把事件队列中需要执行的事件放入主线程调用，如此循环。 Vuejs的特点 组件化, 双向数据绑定, defineProperties数据劫持,Observer and Watcher, 渐进式, Virtual Dom. XSS CSRF 我就讲了他们的原理，这两个知识点网上应该有很多介绍。 提问环节 阿里这样的大公司会偏向于使用开源的框架还是自己造的轮子？ 结果感觉自己回答的还比较轻松，除了上面提到的几个没回答上来的问题。结果还是挂了，学长告知是阿里一个P7级别的主管按照社招标准来面试我的，运气也是有点差。希望再接再厉，查漏补缺，吸取经验教训，为以后的面试做准备吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
